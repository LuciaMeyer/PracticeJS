// https://adventjs.dev/

/* ---------->>> Adventjs #23.js <<<----------

Estamos en la f치brica de Santa Claus 游꾼 creando regalos como si no hubiera un ma침ana.

Pens치bamos que no 칤bamos a llegar pero Jelf Bezos ha tenido una idea genial para aprovechar las m치quinas y optimizar al m치ximo la creaci칩n de regalos. 游꾸

La configuraci칩n de las m치quinas es un string. Podemos reconfigurarla para que haga otro regalo y, para ello, podemos cambiar cada car치cter por otro.

Pero tiene limitaciones: al reemplazar el car치cter se debe mantener el orden, no se puede asignar al mismo car치cter a dos letras distintas (pero s칤 a si mismo) y, claro, la longitud del string debe ser el mismo.

Necesitamos una funci칩n que nos diga si podemos reconfigurar una m치quina para que de un regalo pueda pasar a fabricar otro seg칰n las reglas mencionadas. Lo mejor es que veamos un ejemplo:

const from = 'BAL'
const to   = 'LIB'
1) canReconfigure(from, to) // true
/* la transformaci칩n ser칤a as칤:
B -> L
A -> I
L -> B

const from = 'CON'
const to   = 'JUU'
2) canReconfigure(from, to) // false
no se puede hacer la transformaci칩n:
C -> J
O -> U
N -> FALLO

const from = 'XBOX'
const to   = 'XXBO'
3) canReconfigure(from, to) // false
no se puede hacer la transformaci칩n:
X -> X
B -> X (FALLO, no mantiene el orden de transformaci칩n y la B no puede asignarse a la X que ya se asign칩 a otra) 
O -> B
X -> O (FALLO, la X no puede asignarse a la O que ya se asign칩 a la X)

const from = 'XBOX'
const to   = 'XOBX'
4) canReconfigure(from, to) // true

const from = 'MMM'
const to   = 'MID'
5) canReconfigure(from, to) // false
no se puede hacer la transformaci칩n:
M -> M (BIEN, asigna el mismo car치cter a si mismo)
M -> I (FALLO, asigna el mismo car치cter a dos letras distintas)
M -> D (FALLO, asigna el mismo car치cter a dos letras distintas)

const from = 'AA'
const to   = 'MID'
6) canReconfigure(from, to) // false -> no tiene la misma longitud

*/

const canReconfigure = (from, to) => {

    if(from.length !== to.length) return false;
    for (let i = 1; i < from.length; i++) { 
        if (from[i] === from[i-1] && to[i] !== to[i-1] || from[i] !== from[i-1] && to[i] === to[i-1]) return false;
    }   
    return true;
};
console.log(canReconfigure('BAL', 'LIB')); // true
console.log(canReconfigure('CON', 'JUU')); // false
console.log(canReconfigure('XBOX', 'XXBO')); // false
console.log(canReconfigure('XBOX', 'XOBX')); // true
console.log(canReconfigure('MMM', 'MID')) // false
console.log(canReconfigure('AA', 'MID')) // false
